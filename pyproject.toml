[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "end_to_end_llm_app_backend"
version = "0.1.0"
description = "Backend service for the End-to-End LLM App project."
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"} # Or choose another license
# Add authors, classifiers, etc. as needed

# Core dependencies (same as were in requirements.txt)
dependencies = [
    "fastapi",
    "uvicorn[standard]", # Includes httptools, uvloop, etc.
    "httpx",
    "pydantic", # Already a fastapi dependency, but good to be explicit
    "pydantic-settings", # Use pydantic-settings for config
    "python-dotenv", # For config later
    "redis[hiredis]>=5.0.0", # Added Redis client
    # Database and Auth dependencies
    "sqlalchemy[asyncio]>=2.0", # SQLAlchemy ORM with asyncio
    "asyncpg",                   # Async PostgreSQL driver
    "alembic",                   # Database migrations
    "passlib[bcrypt]",           # Password hashing
    "python-jose[cryptography]", # JWT handling
    "python-multipart",          # Required by FastAPI for OAuth2 password flow form data
    "email-validator",           # Required by Pydantic for EmailStr validation
    # Add other dependencies as needed
]

[project.optional-dependencies]
# Test dependencies
test = [
    "pytest",
    "pytest-asyncio",
    "fakeredis[lua]>=2.0.0", # Added fakeredis for testing
    # httpx is already a core dependency
]

# You can add other groups like 'dev' for linters, formatters etc.

[tool.setuptools.packages.find]
# Find packages starting from the root context directory ('.' during build)
# and specifically look inside the 'backend' directory.
where = ["."] # Search from the root of the context
include = ["backend", "backend.*"] # Explicitly include backend and its subpackages

[tool.pytest.ini_options]
# Recommended asyncio mode
asyncio_mode = "auto"
# Add test paths if needed, though pytest usually finds them
# testpaths = [
#     "backend/tests",
# ] 