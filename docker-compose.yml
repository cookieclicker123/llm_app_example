version: '3.8'

services:
  backend:
    # Build the image using the Dockerfile in the ./backend directory
    build:
      context: .
      dockerfile: backend/Dockerfile
    # Map port 8000 on the host to port 8000 in the container
    ports:
      - "8000:8000"
    # Set environment variables from a .env file in the project root
    # Pydantic settings in config.py will automatically pick these up
    # Useful for overriding defaults or setting secrets without hardcoding
    env_file:
      - .env
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # REDIS_PASSWORD: your_redis_password # Uncomment and set if redis requires password
      OPENAI_API_KEY: ${OPENAI_API_KEY} # Make sure this is in your .env or system env
      # Construct the database URL from other env vars
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    # Mount volumes to persist data and potentially enable code updates
    volumes:
      # Map the local tmp directory to the container's tmp directory
      # This allows us to see generated files like JSON sessions locally
      - ./backend/tmp:/app/backend/tmp
      # Map the local tests directory to the container's tests directory
      # Ensures tests run with the latest local code during development
      - ./backend/tests:/app/backend/tests
      # Disable main code mount for debugging import issues
      # - ./backend:/app/backend # Mount backend code for development
    # Ensure backend starts after redis is healthy
    depends_on:
      redis:
        condition: service_started
      postgres: # Add dependency on postgres
        condition: service_healthy # Wait for postgres to be ready
    #   - db # If using a DB
    #   - ollama # If running Ollama in compose

  # Database service (PostgreSQL) - Uncomment and configure later
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432" # Expose postgres port to host (optional, for direct access/debugging)
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}       # Read from .env
      POSTGRES_USER: ${POSTGRES_USER}     # Read from .env
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Read from .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache service (Redis)
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    # Add password authentication if needed
    # command: redis-server --requirepass your_redis_password
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama service - Uncomment and configure later if running via Compose
  # ollama:
  #   image: ollama/ollama
  #   ports:
  #     - "11434:11434"
  #   volumes:
  #     - ollama_data:/root/.ollama
  #   # GPU support (example)
  #   # deploy:
  #   #   resources:
  #   #     reservations:
  #   #       devices:
  #   #         - driver: nvidia
  #   #           count: 1
  #   #           capabilities: [gpu]

  # Monitoring services (Prometheus, Grafana) - Uncomment and configure later
  # prometheus:
  #   image: prom/prometheus
  #   volumes:
  #     - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"

  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana

volumes:
  redis_data:
  postgres_data: # Define the named volume for postgres
  ollama_data:
  grafana_data:

# Network configuration (optional, but good practice) - Uncomment later
# networks:
#   app_network:
#     driver: bridge 