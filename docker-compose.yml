version: '3.8'

services:
  backend:
    # Build the image using the Dockerfile in the ./backend directory
    build:
      context: .
      dockerfile: backend/Dockerfile
    # Map port 8000 on the host to port 8000 in the container
    ports:
      - "8000:8000"
    # Set environment variables from a .env file in the project root
    # Pydantic settings in config.py will automatically pick these up
    # Useful for overriding defaults or setting secrets without hardcoding
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis # Override default host to use service name
    # Mount volumes to persist data and potentially enable code updates
    volumes:
      # Map the local tmp directory to the container's tmp directory
      # This allows us to see generated files like JSON sessions locally
      - ./backend/tmp:/app/backend/tmp
      # Map the local tests directory to the container's tests directory
      # Ensures tests run with the latest local code during development
      - ./backend/tests:/app/backend/tests
      # Optional: Uncomment below to mount the *entire* backend code 
      # for live updates without rebuilding (if using --reload with uvicorn).
      # Be cautious, this bypasses the code baked into the image during build.
      # - ./backend:/app/backend
    # Ensure backend starts after redis is healthy
    depends_on:
      redis:
        condition: service_healthy
    #   - db # If using a DB
    #   - ollama # If running Ollama in compose

  # Database service (PostgreSQL) - Uncomment and configure later
  # db:
  #   image: postgres:15
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data/
  #   environment:
  #     - POSTGRES_DB=appdb
  #     - POSTGRES_USER=user
  #     - POSTGRES_PASSWORD=password
  #   env_file:
  #     - .env # Could also load DB secrets from here

  # Cache service (Redis)
  redis:
    image: redis:7-alpine
    command: redis-server --save "" --appendonly yes # Disable RDB, enable AOF
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379" # Expose Redis port to host (optional, for direct inspection)
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama service - Uncomment and configure later if running via Compose
  # ollama:
  #   image: ollama/ollama
  #   ports:
  #     - "11434:11434"
  #   volumes:
  #     - ollama_data:/root/.ollama
  #   # GPU support (example)
  #   # deploy:
  #   #   resources:
  #   #     reservations:
  #   #       devices:
  #   #         - driver: nvidia
  #   #           count: 1
  #   #           capabilities: [gpu]

  # Monitoring services (Prometheus, Grafana) - Uncomment and configure later
  # prometheus:
  #   image: prom/prometheus
  #   volumes:
  #     - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"

  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana

volumes:
  postgres_data:
  redis_data: # Added named volume for Redis data
  ollama_data:
  grafana_data:

# Network configuration (optional, but good practice) - Uncomment later
# networks:
#   app_network:
#     driver: bridge 